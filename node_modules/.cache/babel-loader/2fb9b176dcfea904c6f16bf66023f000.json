{"ast":null,"code":"import _classCallCheck from \"/Users/shasta/Documents/Web/Threejs/Our Project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shasta/Documents/Web/Threejs/Our Project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shasta/Documents/Web/Threejs/Our Project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shasta/Documents/Web/Threejs/Our Project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shasta/Documents/Web/Threejs/Our Project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/shasta/Documents/Web/Threejs/Our Project/src/components/Three/SimpleExamples/RotatingCube.js\";\nimport React, { Component } from 'react';\nimport * as THREE from 'three';\n\nvar RotatingCube =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(RotatingCube, _Component);\n\n  function RotatingCube() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, RotatingCube);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RotatingCube)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleResize = function () {\n      var width = _this.mount.clientWidth;\n      var height = _this.mount.clientHeight;\n\n      _this.renderer.setSize(width, height);\n\n      _this.camera.aspect = width / height;\n\n      _this.camera.updateProjectionMatrix();\n    };\n\n    _this.start = function () {\n      if (!_this.frameId) {\n        _this.frameId = requestAnimationFrame(_this.animate);\n      }\n    };\n\n    _this.stop = function () {\n      cancelAnimationFrame(_this.frameId);\n    };\n\n    _this.animate = function () {\n      _this.cube.rotation.x += 0.01;\n      _this.cube.rotation.y += 0.01;\n\n      _this.renderScene();\n\n      _this.frameId = window.requestAnimationFrame(_this.animate);\n    };\n\n    _this.renderScene = function () {\n      _this.renderer.render(_this.scene, _this.camera);\n    };\n\n    return _this;\n  }\n\n  _createClass(RotatingCube, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var width = this.mount.clientWidth;\n      var height = this.mount.clientHeight;\n      var scene = new THREE.Scene();\n      var camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n      var renderer = new THREE.WebGLRenderer({\n        alpha: true\n      });\n      var geometry = new THREE.BoxBufferGeometry(1, 1, 1);\n      var material = new THREE.MeshBasicMaterial({\n        color: 0xff00ff\n      });\n      var cube = new THREE.Mesh(geometry, material);\n      camera.position.z = 4;\n      scene.add(cube);\n      renderer.setClearColor('#000000');\n      renderer.setSize(width, height);\n      this.scene = scene;\n      this.camera = camera;\n      this.renderer = renderer;\n      this.material = material;\n      this.cube = cube;\n      window.addEventListener('resize', this.handleResize);\n      this.mount.appendChild(this.renderer.domElement);\n      this.start();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this.handleResize);\n      this.stop();\n      this.mount.removeChild(this.renderer.domElement);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        style: {\n          width: '100%',\n          height: 'calc(100vh - 100px)'\n        },\n        ref: function ref(mount) {\n          _this2.mount = mount;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return RotatingCube;\n}(Component);\n\nexport default RotatingCube;","map":{"version":3,"sources":["/Users/shasta/Documents/Web/Threejs/Our Project/src/components/Three/SimpleExamples/RotatingCube.js"],"names":["React","Component","THREE","RotatingCube","handleResize","width","mount","clientWidth","height","clientHeight","renderer","setSize","camera","aspect","updateProjectionMatrix","start","frameId","requestAnimationFrame","animate","stop","cancelAnimationFrame","cube","rotation","x","y","renderScene","window","render","scene","Scene","PerspectiveCamera","WebGLRenderer","alpha","geometry","BoxBufferGeometry","material","MeshBasicMaterial","color","Mesh","position","z","add","setClearColor","addEventListener","appendChild","domElement","removeEventListener","removeChild"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport * as THREE from 'three'\n\nclass RotatingCube extends Component {\n  componentDidMount() {\n    let width = this.mount.clientWidth\n    let height = this.mount.clientHeight\n    \n\n    let scene = new THREE.Scene()\n    let camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000)\n    let renderer = new THREE.WebGLRenderer({ alpha: true })\n    let geometry = new THREE.BoxBufferGeometry(1, 1, 1)\n    let material = new THREE.MeshBasicMaterial({ color: 0xff00ff })\n    let cube = new THREE.Mesh(geometry, material)\n\n    camera.position.z = 4\n\n    scene.add(cube)\n\n    renderer.setClearColor('#000000')\n    renderer.setSize(width, height)\n\n    this.scene = scene\n    this.camera = camera\n    this.renderer = renderer\n    this.material = material\n    this.cube = cube\n\n\n    window.addEventListener('resize', this.handleResize)\n\n    this.mount.appendChild(this.renderer.domElement)\n    this.start()\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize',  this.handleResize)\n    this.stop()\n    this.mount.removeChild(this.renderer.domElement)\n  }\n\n  handleResize = () => {\n    \n    let width = this.mount.clientWidth\n    let height = this.mount.clientHeight\n    \n    this.renderer.setSize(width, height)\n    this.camera.aspect = width / height\n    this.camera.updateProjectionMatrix()\n  }\n\n  start = () => {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate)\n    }\n  }\n\n  stop = () => {\n    cancelAnimationFrame(this.frameId)\n  }\n\n  animate = () => {\n    this.cube.rotation.x += 0.01\n    this.cube.rotation.y += 0.01\n\n    this.renderScene()\n    this.frameId = window.requestAnimationFrame(this.animate)\n  }\n\n  renderScene = () => {\n    this.renderer.render(this.scene, this.camera)\n  }\n\n  render() {\n    return (\n      <div\n        style={{ width: '100%', height: 'calc(100vh - 100px)' }}\n        ref={mount => {\n          this.mount = mount\n        }}\n      />\n    )\n  }\n}\n\nexport default RotatingCube\n"]},"metadata":{},"sourceType":"module"}