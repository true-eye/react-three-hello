{"ast":null,"code":"import _classCallCheck from \"/Users/shasta/Documents/Web/Threejs/Our Project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shasta/Documents/Web/Threejs/Our Project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shasta/Documents/Web/Threejs/Our Project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shasta/Documents/Web/Threejs/Our Project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shasta/Documents/Web/Threejs/Our Project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/shasta/Documents/Web/Threejs/Our Project/src/components/Three/LoaderExamples/TextureLoaderExample.js\";\nimport React, { Component } from 'react';\nimport * as THREE from 'three';\nimport OrbitControls from 'three-orbitcontrols';\n\nvar TextureLoaderExample =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TextureLoaderExample, _Component);\n\n  function TextureLoaderExample() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TextureLoaderExample);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TextureLoaderExample)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleResize = function () {\n      var width = _this.mount.clientWidth;\n      var height = _this.mount.clientHeight;\n\n      _this.renderer.setSize(width, height);\n\n      _this.camera.aspect = width / height;\n\n      _this.camera.updateProjectionMatrix();\n    };\n\n    _this.start = function () {\n      if (!_this.frameId) {\n        _this.frameId = requestAnimationFrame(_this.animate);\n      }\n    };\n\n    _this.stop = function () {\n      cancelAnimationFrame(_this.frameId);\n    };\n\n    _this.animate = function () {\n      _this.mesh.rotation.y += 0.01;\n\n      _this.renderScene();\n\n      _this.frameId = window.requestAnimationFrame(_this.animate);\n    };\n\n    _this.renderScene = function () {\n      _this.renderer.render(_this.scene, _this.camera);\n    };\n\n    return _this;\n  }\n\n  _createClass(TextureLoaderExample, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var width = this.mount.clientWidth;\n      var height = this.mount.clientHeight; //scene\n\n      var scene = new THREE.Scene();\n      scene.background = new THREE.Color(0x8FBCD4); //camera\n\n      var camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n      camera.position.z = 4; //renderer\n\n      var renderer = new THREE.WebGLRenderer({\n        alpha: true\n      });\n      renderer.setSize(width, height);\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.setClearColor('#000000'); //geometry\n\n      var geometry = new THREE.SphereBufferGeometry(1, 50, 50); //add light\n\n      var ambientLight = new THREE.AmbientLight(0xffffff, 1);\n      scene.add(ambientLight);\n      var frontLight = new THREE.DirectionalLight(0xffffff, 1);\n      frontLight.position.set(10, 10, 10);\n      var backLight = new THREE.DirectionalLight(0xffffff, 1);\n      backLight.position.set(-10, 10, -10);\n      scene.add(frontLight, backLight); //Load Texture\n\n      var texture = new THREE.TextureLoader().load('textures/texture2.jpg');\n      texture.anisotropy = 16; // create a Standard material using the texture we just loaded as a color map\n\n      var material = new THREE.MeshStandardMaterial({\n        map: texture\n      });\n      var mesh = new THREE.Mesh(geometry, material);\n      scene.add(mesh); //add orbit\n\n      var orbit = new OrbitControls(camera, renderer.domElement);\n      scene.add(orbit); //set this. valuable\n\n      this.scene = scene;\n      this.camera = camera;\n      this.renderer = renderer;\n      this.mesh = mesh; //response for changing window size\n\n      window.addEventListener('resize', this.handleResize);\n      this.mount.appendChild(this.renderer.domElement);\n      this.start();\n      console.log(this.scene);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this.handleResize);\n      this.stop();\n      this.mount.removeChild(this.renderer.domElement);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        style: {\n          width: '100%',\n          height: 'calc(100vh - 100px)'\n        },\n        ref: function ref(mount) {\n          _this2.mount = mount;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return TextureLoaderExample;\n}(Component);\n\nexport default TextureLoaderExample;","map":{"version":3,"sources":["/Users/shasta/Documents/Web/Threejs/Our Project/src/components/Three/LoaderExamples/TextureLoaderExample.js"],"names":["React","Component","THREE","OrbitControls","TextureLoaderExample","handleResize","width","mount","clientWidth","height","clientHeight","renderer","setSize","camera","aspect","updateProjectionMatrix","start","frameId","requestAnimationFrame","animate","stop","cancelAnimationFrame","mesh","rotation","y","renderScene","window","render","scene","Scene","background","Color","PerspectiveCamera","position","z","WebGLRenderer","alpha","setPixelRatio","devicePixelRatio","setClearColor","geometry","SphereBufferGeometry","ambientLight","AmbientLight","add","frontLight","DirectionalLight","set","backLight","texture","TextureLoader","load","anisotropy","material","MeshStandardMaterial","map","Mesh","orbit","domElement","addEventListener","appendChild","console","log","removeEventListener","removeChild"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport * as THREE from 'three'\nimport OrbitControls from 'three-orbitcontrols'\n\n                \nclass TextureLoaderExample extends Component {\n  componentDidMount() {\n    let width = this.mount.clientWidth\n    let height = this.mount.clientHeight\n    \n    //scene\n    let scene = new THREE.Scene()\n    scene.background = new THREE.Color( 0x8FBCD4 );\n\n    //camera\n    let camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000)\n    camera.position.z = 4\n\n    //renderer\n    let renderer = new THREE.WebGLRenderer({ alpha: true })\n    renderer.setSize(width, height)\n    renderer.setPixelRatio( window.devicePixelRatio );\n    renderer.setClearColor('#000000')\n\n    //geometry\n    let geometry = new THREE.SphereBufferGeometry(1, 50, 50)\n    \n    //add light\n    let ambientLight = new THREE.AmbientLight( 0xffffff, 1 );\n    scene.add( ambientLight );\n\n    let frontLight = new THREE.DirectionalLight( 0xffffff, 1 );\n    frontLight.position.set( 10, 10, 10 );\n\n    let backLight = new THREE.DirectionalLight( 0xffffff, 1 );\n    backLight.position.set( -10, 10, -10 );\n\n    scene.add( frontLight, backLight );\n\n\n    //Load Texture\n    let texture = new THREE.TextureLoader().load( 'textures/texture2.jpg' );\n    texture.anisotropy = 16;\n    \n    // create a Standard material using the texture we just loaded as a color map\n    let material = new THREE.MeshStandardMaterial( {\n        map: texture,\n    } );\n    let mesh = new THREE.Mesh( geometry, material );\n    scene.add( mesh );\n\n    //add orbit\n    let orbit = new OrbitControls( camera, renderer.domElement );\n    scene.add(orbit);\n\n\n    //set this. valuable\n    this.scene = scene\n    this.camera = camera\n    this.renderer = renderer\n    this.mesh = mesh\n    //response for changing window size\n    window.addEventListener('resize', this.handleResize)\n\n    this.mount.appendChild(this.renderer.domElement)\n    this.start()\n    console.log(this.scene);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize',  this.handleResize)\n    this.stop()\n    this.mount.removeChild(this.renderer.domElement)\n  }\n\n  handleResize = () => {\n    \n    let width = this.mount.clientWidth\n    let height = this.mount.clientHeight\n    \n    this.renderer.setSize(width, height)\n    this.camera.aspect = width / height\n    this.camera.updateProjectionMatrix()\n  }\n\n  start = () => {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate)\n    }\n  }\n\n  stop = () => {\n    cancelAnimationFrame(this.frameId)\n  }\n\n  animate = () => {\n    this.mesh.rotation.y += 0.01\n\n    this.renderScene()\n    this.frameId = window.requestAnimationFrame(this.animate)\n  }\n\n  renderScene = () => {\n    this.renderer.render(this.scene, this.camera)\n  }\n\n  render() {\n    return (\n      <div\n        style={{ width: '100%', height: 'calc(100vh - 100px)' }}\n        ref={mount => {\n          this.mount = mount\n        }}\n      />\n    )\n  }\n}\n\nexport default TextureLoaderExample\n"]},"metadata":{},"sourceType":"module"}