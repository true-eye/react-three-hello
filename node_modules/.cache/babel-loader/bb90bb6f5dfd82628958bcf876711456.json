{"ast":null,"code":"import _classCallCheck from \"/Users/shasta/Documents/Web/Threejs/Our Project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shasta/Documents/Web/Threejs/Our Project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shasta/Documents/Web/Threejs/Our Project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shasta/Documents/Web/Threejs/Our Project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shasta/Documents/Web/Threejs/Our Project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/shasta/Documents/Web/Threejs/Our Project/src/components/Three/LoaderExamples/LogoLoaderExample.js\";\nimport React, { Component } from 'react';\nimport * as THREE from 'three';\nimport OrbitControls from 'three-orbitcontrols';\nimport { MTLLoader, OBJLoader } from 'three-obj-mtl-loader';\nimport ImprovedNoise from 'improved-noise';\nvar path = \"img/\";\nvar format = \".jpg\";\nvar FLOOR_RES = 60;\nvar FLOOR_HT = 250;\nvar FLOOR_WIDTH = 3600;\nvar FLOOR_DEPTH = 4800;\nvar MOVE_SPD = 1.9;\nvar noiseScale = 9.5;\nvar noiseSeed = Math.random() * 100;\n\nvar LogoLoaderExample =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LogoLoaderExample, _Component);\n\n  function LogoLoaderExample() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, LogoLoaderExample);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LogoLoaderExample)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleResize = function () {\n      var width = _this.mount.clientWidth;\n      var height = _this.mount.clientHeight;\n\n      _this.renderer.setSize(width, height);\n\n      _this.camera.aspect = width / height;\n\n      _this.camera.updateProjectionMatrix();\n    };\n\n    _this.start = function () {\n      if (!_this.frameId) {\n        _this.frameId = requestAnimationFrame(_this.animate);\n      }\n    };\n\n    _this.stop = function () {\n      cancelAnimationFrame(_this.frameId);\n    };\n\n    _this.animate = function () {\n      _this.renderScene();\n\n      _this.frameId = window.requestAnimationFrame(_this.animate);\n    };\n\n    _this.renderScene = function () {\n      var timer = -0.0002 * Date.now();\n      _this.pointLight.x = 2400 * Math.cos(timer);\n      _this.pointLight.z = 2400 * Math.sin(timer);\n      _this.pointLight2.x = 1800 * Math.cos(-timer * 1.5);\n      _this.pointLight2.z = 1800 * Math.sin(-timer * 1.5); //this.camera.position.x += (this.mouseX - this.camera.position.x) * 0.05;\n      //this.camera.position.y += (this.mouseY - this.camera.position.y) * 0.05;\n\n      _this.setWaves(); //this.camera.lookAt(this.scene.position);\n\n\n      _this.renderer.render(_this.scene, _this.camera);\n    };\n\n    return _this;\n  }\n\n  _createClass(LogoLoaderExample, [{\n    key: \"initCamera\",\n    value: function initCamera() {\n      var width = this.mount.clientWidth;\n      var height = this.mount.clientHeight;\n      this.stepCount = 0;\n      this.mouseX = 0;\n      this.mouseY = 0;\n      var windowHalfX = width / 2;\n      var windowHalfY = height / 2;\n      this.snoise = new ImprovedNoise();\n      var camera = new THREE.PerspectiveCamera(70, width / height, 1, 4000);\n      camera.position.z = 2750;\n      this.camera = camera;\n    }\n  }, {\n    key: \"initScene\",\n    value: function initScene() {\n      var scene = new THREE.Scene();\n      scene.fog = new THREE.FogExp2(0x1c3c4a, 0.00045);\n      this.scene = scene;\n    }\n  }, {\n    key: \"loadModels\",\n    value: function loadModels() {//Load model\n\n      /*new MTLLoader().load('models/bench.mtl', (materials) => {\n          materials.preload()\n          let objLoader = new OBJLoader();\n          objLoader.setMaterials(materials)\n          objLoader.load('models/bench.obj', (object) => {\n          this.scene.add(object)\n          })\n      })*/\n    }\n  }, {\n    key: \"initLight\",\n    value: function initLight() {\n      var hemisphereLight = new THREE.HemisphereLight(0xe3feff, 0xe6ddc8, 0.7);\n      this.scene.add(hemisphereLight);\n      hemisphereLight.position.y = 300;\n      var centerLight = new THREE.SpotLight(0xb7f9ff, 1);\n      this.scene.add(centerLight);\n      centerLight.position.set(2500, 300, 2000);\n      centerLight.penumbra = 1;\n      centerLight.decay = 5;\n      this.pointLight = new THREE.PointLight(0xe07bff, 1.5);\n      this.pointLight.position.z = 200;\n      this.scene.add(this.pointLight);\n      this.pointLight2 = new THREE.PointLight(0xff4e00, 1.2);\n      this.pointLight2.position.z = 200;\n      this.scene.add(this.pointLight2);\n    }\n  }, {\n    key: \"initSkyBox\",\n    value: function initSkyBox() {\n      var geometry = new THREE.CubeGeometry(6000, 6000, 6000);\n      var cubeMaterials = [new THREE.MeshBasicMaterial({\n        map: new THREE.TextureLoader().load(\"textures/skybox/px.jpg\"),\n        side: THREE.DoubleSide\n      }), new THREE.MeshBasicMaterial({\n        map: new THREE.TextureLoader().load('textures/skybox/nx.jpg'),\n        side: THREE.DoubleSide\n      }), new THREE.MeshBasicMaterial({\n        map: new THREE.TextureLoader().load('textures/skybox/px.jpg'),\n        side: THREE.DoubleSide\n      }), new THREE.MeshBasicMaterial({\n        map: new THREE.TextureLoader().load('textures/skybox/nx.jpg'),\n        side: THREE.DoubleSide\n      }), new THREE.MeshBasicMaterial({\n        map: new THREE.TextureLoader().load('textures/skybox/px.jpg'),\n        side: THREE.DoubleSide\n      }), new THREE.MeshBasicMaterial({\n        map: new THREE.TextureLoader().load('textures/skybox/nx.jpg'),\n        side: THREE.DoubleSide\n      })];\n      var cubeMaterial = new THREE.MeshFaceMaterial(cubeMaterials);\n      this.cube = new THREE.Mesh(geometry, cubeMaterial);\n      this.scene.add(this.cube);\n    }\n  }, {\n    key: \"initRenderer\",\n    value: function initRenderer() {\n      var width = this.mount.clientWidth;\n      var height = this.mount.clientHeight;\n      var renderer = new THREE.WebGLRenderer({\n        alpha: true\n      });\n      renderer.setSize(width, height);\n      renderer.setPixelRatio(window.devicePixelRatio);\n      this.renderer = renderer;\n    }\n  }, {\n    key: \"initController\",\n    value: function initController() {\n      //add orbit\n      var orbit = new OrbitControls(this.camera, this.renderer.domElement);\n      this.scene.add(orbit);\n    }\n  }, {\n    key: \"initGeometry\",\n    value: function initGeometry() {\n      this.moverGroup = new THREE.Object3D();\n      this.scene.add(this.moverGroup);\n      var floorGroup = new THREE.Object3D();\n      var floorMaterial = new THREE.MeshPhongMaterial({\n        color: 0xcccccc,\n        side: THREE.DoubleSide,\n        blending: THREE.AdditiveBlending,\n        wireframe: false\n      });\n      this.floorGeometry = new THREE.PlaneGeometry(FLOOR_WIDTH + 1200, FLOOR_DEPTH, FLOOR_RES, FLOOR_RES);\n      var floorMesh = new THREE.Mesh(this.floorGeometry, floorMaterial);\n      var floorMesh2 = new THREE.Mesh(this.floorGeometry, floorMaterial);\n      floorMesh2.position.y = 20;\n      floorMesh2.position.z = 5;\n      floorGroup.add(floorMesh);\n      floorGroup.add(floorMesh2);\n      this.scene.add(floorGroup);\n      floorMesh.rotation.x = Math.PI / 1.65;\n      floorMesh2.rotation.x = Math.PI / 1.65;\n      floorGroup.position.y = 180;\n      this.pGeometry = new THREE.Geometry();\n      var textureLoader = new THREE.TextureLoader();\n      var sprite = textureLoader.load(\"textures/aarp.png\");\n\n      for (var i = 0; i < 2000; i++) {\n        var vertex = new THREE.Vector3();\n        vertex.x = 4000 * Math.random() - 2000;\n        vertex.y = 700 * Math.random() - 200;\n        vertex.z = 5000 * Math.random() - 2000;\n        this.pGeometry.vertices.push(vertex);\n      }\n\n      var logo = textureLoader.load(\"textures/aarp.png\");\n      var geometry = new THREE.PlaneBufferGeometry(266, 59, 1);\n      var material = new THREE.MeshLambertMaterial({\n        transparent: true,\n        opacity: 0.7,\n        blending: THREE.AdditiveBlending,\n        map: logo,\n        side: THREE.DoubleSide\n      });\n      var plane = new THREE.Mesh(geometry, material);\n      plane.position.set(0, 70, 2400);\n      this.scene.add(plane);\n    }\n  }, {\n    key: \"setWaves\",\n    value: function setWaves() {\n      this.stepCount++;\n      this.moverGroup.position.z = -MOVE_SPD;\n      var i, ipos;\n      var offset = this.stepCount * MOVE_SPD / FLOOR_DEPTH * FLOOR_RES;\n\n      for (i = 0; i < FLOOR_RES; i++) {\n        for (var j = 0; j < FLOOR_RES + 1; j++) {\n          ipos = i + offset;\n\n          if (i > 30 || j < 12 || j > 48) {\n            this.floorGeometry.vertices[i * (FLOOR_RES + 1) + j].z = this.snoise.noise(ipos / FLOOR_RES * noiseScale, j / FLOOR_RES * noiseScale, noiseSeed) * FLOOR_HT;\n          } else if (i > 25 && i < 30) {\n            this.floorGeometry.vertices[i * (FLOOR_RES + 1) + j].z = this.snoise.noise(ipos / FLOOR_RES * noiseScale, j / FLOOR_RES * noiseScale, noiseSeed) * (FLOOR_HT / 1.2);\n          } else {\n            this.floorGeometry.vertices[i * (FLOOR_RES + 1) + j].z = this.snoise.noise(ipos / FLOOR_RES * noiseScale, j / FLOOR_RES * noiseScale, noiseSeed) * (FLOOR_HT / 2);\n          }\n        }\n      }\n\n      this.floorGeometry.verticesNeedUpdate = true;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.stepCount = 0;\n      this.initCamera();\n      this.initScene();\n      this.initLight();\n      this.initRenderer(); //this.initSkyBox()\n\n      this.initController();\n      this.initGeometry();\n      this.loadModels(); //response for changing window size\n\n      window.addEventListener('resize', this.handleResize);\n      this.mount.appendChild(this.renderer.domElement);\n      this.start();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this.handleResize);\n      this.stop();\n      this.mount.removeChild(this.renderer.domElement);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        style: {\n          width: '100%',\n          height: 'calc(100vh - 100px)'\n        },\n        ref: function ref(mount) {\n          _this2.mount = mount;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return LogoLoaderExample;\n}(Component);\n\nexport default LogoLoaderExample;","map":{"version":3,"sources":["/Users/shasta/Documents/Web/Threejs/Our Project/src/components/Three/LoaderExamples/LogoLoaderExample.js"],"names":["React","Component","THREE","OrbitControls","MTLLoader","OBJLoader","ImprovedNoise","path","format","FLOOR_RES","FLOOR_HT","FLOOR_WIDTH","FLOOR_DEPTH","MOVE_SPD","noiseScale","noiseSeed","Math","random","LogoLoaderExample","handleResize","width","mount","clientWidth","height","clientHeight","renderer","setSize","camera","aspect","updateProjectionMatrix","start","frameId","requestAnimationFrame","animate","stop","cancelAnimationFrame","renderScene","window","timer","Date","now","pointLight","x","cos","z","sin","pointLight2","setWaves","render","scene","stepCount","mouseX","mouseY","windowHalfX","windowHalfY","snoise","PerspectiveCamera","position","Scene","fog","FogExp2","hemisphereLight","HemisphereLight","add","y","centerLight","SpotLight","set","penumbra","decay","PointLight","geometry","CubeGeometry","cubeMaterials","MeshBasicMaterial","map","TextureLoader","load","side","DoubleSide","cubeMaterial","MeshFaceMaterial","cube","Mesh","WebGLRenderer","alpha","setPixelRatio","devicePixelRatio","orbit","domElement","moverGroup","Object3D","floorGroup","floorMaterial","MeshPhongMaterial","color","blending","AdditiveBlending","wireframe","floorGeometry","PlaneGeometry","floorMesh","floorMesh2","rotation","PI","pGeometry","Geometry","textureLoader","sprite","i","vertex","Vector3","vertices","push","logo","PlaneBufferGeometry","material","MeshLambertMaterial","transparent","opacity","plane","ipos","offset","j","noise","verticesNeedUpdate","initCamera","initScene","initLight","initRenderer","initController","initGeometry","loadModels","addEventListener","appendChild","removeEventListener","removeChild"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AACA,SAAQC,SAAR,EAAmBC,SAAnB,QAAmC,sBAAnC;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AAEA,IAAMC,IAAI,GAAG,MAAb;AACA,IAAMC,MAAM,GAAG,MAAf;AACA,IAAMC,SAAS,GAAG,EAAlB;AACA,IAAMC,QAAQ,GAAG,GAAjB;AAEA,IAAMC,WAAW,GAAG,IAApB;AACA,IAAMC,WAAW,GAAG,IAApB;AACA,IAAMC,QAAQ,GAAG,GAAjB;AACA,IAAMC,UAAU,GAAG,GAAnB;AACA,IAAMC,SAAS,GAAGC,IAAI,CAACC,MAAL,KAAgB,GAAlC;;IAEMC,iB;;;;;;;;;;;;;;;;;;UA8LFC,Y,GAAe,YAAM;AAEjB,UAAIC,KAAK,GAAG,MAAKC,KAAL,CAAWC,WAAvB;AACA,UAAIC,MAAM,GAAG,MAAKF,KAAL,CAAWG,YAAxB;;AAEA,YAAKC,QAAL,CAAcC,OAAd,CAAsBN,KAAtB,EAA6BG,MAA7B;;AACA,YAAKI,MAAL,CAAYC,MAAZ,GAAqBR,KAAK,GAAGG,MAA7B;;AACA,YAAKI,MAAL,CAAYE,sBAAZ;AACH,K;;UAEDC,K,GAAQ,YAAM;AACV,UAAI,CAAC,MAAKC,OAAV,EAAmB;AACnB,cAAKA,OAAL,GAAeC,qBAAqB,CAAC,MAAKC,OAAN,CAApC;AACC;AACJ,K;;UAEDC,I,GAAO,YAAM;AACTC,MAAAA,oBAAoB,CAAC,MAAKJ,OAAN,CAApB;AACH,K;;UAEDE,O,GAAU,YAAM;AACZ,YAAKG,WAAL;;AACA,YAAKL,OAAL,GAAeM,MAAM,CAACL,qBAAP,CAA6B,MAAKC,OAAlC,CAAf;AACH,K;;UAEDG,W,GAAc,YAAM;AAChB,UAAIE,KAAK,GAAG,CAAC,MAAD,GAAUC,IAAI,CAACC,GAAL,EAAtB;AACA,YAAKC,UAAL,CAAgBC,CAAhB,GAAoB,OAAO1B,IAAI,CAAC2B,GAAL,CAASL,KAAT,CAA3B;AACA,YAAKG,UAAL,CAAgBG,CAAhB,GAAoB,OAAO5B,IAAI,CAAC6B,GAAL,CAASP,KAAT,CAA3B;AACA,YAAKQ,WAAL,CAAiBJ,CAAjB,GAAqB,OAAO1B,IAAI,CAAC2B,GAAL,CAAS,CAACL,KAAD,GAAS,GAAlB,CAA5B;AACA,YAAKQ,WAAL,CAAiBF,CAAjB,GAAqB,OAAO5B,IAAI,CAAC6B,GAAL,CAAS,CAACP,KAAD,GAAS,GAAlB,CAA5B,CALgB,CAMhB;AACA;;AACA,YAAKS,QAAL,GARgB,CAShB;;;AACA,YAAKtB,QAAL,CAAcuB,MAAd,CAAqB,MAAKC,KAA1B,EAAiC,MAAKtB,MAAtC;AACH,K;;;;;;;iCA9ND;AACI,UAAIP,KAAK,GAAG,KAAKC,KAAL,CAAWC,WAAvB;AACA,UAAIC,MAAM,GAAG,KAAKF,KAAL,CAAWG,YAAxB;AAEA,WAAK0B,SAAL,GAAiB,CAAjB;AAEA,WAAKC,MAAL,GAAc,CAAd;AACA,WAAKC,MAAL,GAAc,CAAd;AACA,UAAIC,WAAW,GAAGjC,KAAK,GAAG,CAA1B;AACA,UAAIkC,WAAW,GAAG/B,MAAM,GAAG,CAA3B;AACA,WAAKgC,MAAL,GAAc,IAAIjD,aAAJ,EAAd;AAGA,UAAIqB,MAAM,GAAG,IAAIzB,KAAK,CAACsD,iBAAV,CAA4B,EAA5B,EAAgCpC,KAAK,GAAGG,MAAxC,EAAgD,CAAhD,EAAmD,IAAnD,CAAb;AACAI,MAAAA,MAAM,CAAC8B,QAAP,CAAgBb,CAAhB,GAAoB,IAApB;AAEA,WAAKjB,MAAL,GAAcA,MAAd;AACH;;;gCAED;AACI,UAAIsB,KAAK,GAAG,IAAI/C,KAAK,CAACwD,KAAV,EAAZ;AACAT,MAAAA,KAAK,CAACU,GAAN,GAAY,IAAIzD,KAAK,CAAC0D,OAAV,CAAkB,QAAlB,EAA4B,OAA5B,CAAZ;AAEA,WAAKX,KAAL,GAAaA,KAAb;AACH;;;iCAED,CACI;;AACA;;;;;;;;AAQH;;;gCAED;AACI,UAAIY,eAAe,GAAG,IAAI3D,KAAK,CAAC4D,eAAV,CAA0B,QAA1B,EAAoC,QAApC,EAA8C,GAA9C,CAAtB;AACA,WAAKb,KAAL,CAAWc,GAAX,CAAeF,eAAf;AACAA,MAAAA,eAAe,CAACJ,QAAhB,CAAyBO,CAAzB,GAA6B,GAA7B;AAEA,UAAIC,WAAW,GAAG,IAAI/D,KAAK,CAACgE,SAAV,CAAoB,QAApB,EAA8B,CAA9B,CAAlB;AACA,WAAKjB,KAAL,CAAWc,GAAX,CAAeE,WAAf;AACAA,MAAAA,WAAW,CAACR,QAAZ,CAAqBU,GAArB,CAAyB,IAAzB,EAA+B,GAA/B,EAAoC,IAApC;AACAF,MAAAA,WAAW,CAACG,QAAZ,GAAuB,CAAvB;AACAH,MAAAA,WAAW,CAACI,KAAZ,GAAoB,CAApB;AAEA,WAAK5B,UAAL,GAAkB,IAAIvC,KAAK,CAACoE,UAAV,CAAqB,QAArB,EAA+B,GAA/B,CAAlB;AACA,WAAK7B,UAAL,CAAgBgB,QAAhB,CAAyBb,CAAzB,GAA6B,GAA7B;AACA,WAAKK,KAAL,CAAWc,GAAX,CAAe,KAAKtB,UAApB;AAEA,WAAKK,WAAL,GAAmB,IAAI5C,KAAK,CAACoE,UAAV,CAAqB,QAArB,EAA+B,GAA/B,CAAnB;AACA,WAAKxB,WAAL,CAAiBW,QAAjB,CAA0Bb,CAA1B,GAA8B,GAA9B;AACA,WAAKK,KAAL,CAAWc,GAAX,CAAe,KAAKjB,WAApB;AACH;;;iCACW;AACR,UAAIyB,QAAQ,GAAG,IAAIrE,KAAK,CAACsE,YAAV,CAAuB,IAAvB,EAA4B,IAA5B,EAAiC,IAAjC,CAAf;AACA,UAAIC,aAAa,GAAG,CAClB,IAAIvE,KAAK,CAACwE,iBAAV,CAA4B;AAAEC,QAAAA,GAAG,EAAE,IAAIzE,KAAK,CAAC0E,aAAV,GAA0BC,IAA1B,CAAgC,wBAAhC,CAAP;AAAmEC,QAAAA,IAAI,EAAE5E,KAAK,CAAC6E;AAA/E,OAA5B,CADkB,EAElB,IAAI7E,KAAK,CAACwE,iBAAV,CAA4B;AAAEC,QAAAA,GAAG,EAAE,IAAIzE,KAAK,CAAC0E,aAAV,GAA0BC,IAA1B,CAAgC,wBAAhC,CAAP;AAAmEC,QAAAA,IAAI,EAAE5E,KAAK,CAAC6E;AAA/E,OAA5B,CAFkB,EAGlB,IAAI7E,KAAK,CAACwE,iBAAV,CAA4B;AAAEC,QAAAA,GAAG,EAAE,IAAIzE,KAAK,CAAC0E,aAAV,GAA0BC,IAA1B,CAAgC,wBAAhC,CAAP;AAAmEC,QAAAA,IAAI,EAAE5E,KAAK,CAAC6E;AAA/E,OAA5B,CAHkB,EAIlB,IAAI7E,KAAK,CAACwE,iBAAV,CAA4B;AAAEC,QAAAA,GAAG,EAAE,IAAIzE,KAAK,CAAC0E,aAAV,GAA0BC,IAA1B,CAAgC,wBAAhC,CAAP;AAAmEC,QAAAA,IAAI,EAAE5E,KAAK,CAAC6E;AAA/E,OAA5B,CAJkB,EAKlB,IAAI7E,KAAK,CAACwE,iBAAV,CAA4B;AAAEC,QAAAA,GAAG,EAAE,IAAIzE,KAAK,CAAC0E,aAAV,GAA0BC,IAA1B,CAAgC,wBAAhC,CAAP;AAAmEC,QAAAA,IAAI,EAAE5E,KAAK,CAAC6E;AAA/E,OAA5B,CALkB,EAMlB,IAAI7E,KAAK,CAACwE,iBAAV,CAA4B;AAAEC,QAAAA,GAAG,EAAE,IAAIzE,KAAK,CAAC0E,aAAV,GAA0BC,IAA1B,CAAgC,wBAAhC,CAAP;AAAmEC,QAAAA,IAAI,EAAE5E,KAAK,CAAC6E;AAA/E,OAA5B,CANkB,CAApB;AASA,UAAIC,YAAY,GAAG,IAAI9E,KAAK,CAAC+E,gBAAV,CAA4BR,aAA5B,CAAnB;AACA,WAAKS,IAAL,GAAY,IAAIhF,KAAK,CAACiF,IAAV,CAAgBZ,QAAhB,EAA0BS,YAA1B,CAAZ;AACA,WAAK/B,KAAL,CAAWc,GAAX,CAAe,KAAKmB,IAApB;AACD;;;mCAGH;AACI,UAAI9D,KAAK,GAAG,KAAKC,KAAL,CAAWC,WAAvB;AACA,UAAIC,MAAM,GAAG,KAAKF,KAAL,CAAWG,YAAxB;AAEA,UAAIC,QAAQ,GAAG,IAAIvB,KAAK,CAACkF,aAAV,CAAwB;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAxB,CAAf;AACA5D,MAAAA,QAAQ,CAACC,OAAT,CAAiBN,KAAjB,EAAwBG,MAAxB;AACAE,MAAAA,QAAQ,CAAC6D,aAAT,CAAwBjD,MAAM,CAACkD,gBAA/B;AAEA,WAAK9D,QAAL,GAAgBA,QAAhB;AAEH;;;qCAGD;AACI;AACA,UAAI+D,KAAK,GAAG,IAAIrF,aAAJ,CAAmB,KAAKwB,MAAxB,EAAgC,KAAKF,QAAL,CAAcgE,UAA9C,CAAZ;AACA,WAAKxC,KAAL,CAAWc,GAAX,CAAeyB,KAAf;AACH;;;mCAED;AACI,WAAKE,UAAL,GAAkB,IAAIxF,KAAK,CAACyF,QAAV,EAAlB;AACA,WAAK1C,KAAL,CAAWc,GAAX,CAAe,KAAK2B,UAApB;AAEA,UAAIE,UAAU,GAAG,IAAI1F,KAAK,CAACyF,QAAV,EAAjB;AACA,UAAIE,aAAa,GAAG,IAAI3F,KAAK,CAAC4F,iBAAV,CAA4B;AAC5CC,QAAAA,KAAK,EAAE,QADqC;AAC3BjB,QAAAA,IAAI,EAAE5E,KAAK,CAAC6E,UADe;AACHiB,QAAAA,QAAQ,EAAE9F,KAAK,CAAC+F,gBADb;AAC+BC,QAAAA,SAAS,EAAE;AAD1C,OAA5B,CAApB;AAGA,WAAKC,aAAL,GAAqB,IAAIjG,KAAK,CAACkG,aAAV,CAAwBzF,WAAW,GAAG,IAAtC,EAA4CC,WAA5C,EAAyDH,SAAzD,EAAoEA,SAApE,CAArB;AAEA,UAAI4F,SAAS,GAAG,IAAInG,KAAK,CAACiF,IAAV,CAAe,KAAKgB,aAApB,EAAmCN,aAAnC,CAAhB;AACA,UAAIS,UAAU,GAAG,IAAIpG,KAAK,CAACiF,IAAV,CAAe,KAAKgB,aAApB,EAAmCN,aAAnC,CAAjB;AACAS,MAAAA,UAAU,CAAC7C,QAAX,CAAoBO,CAApB,GAAwB,EAAxB;AACAsC,MAAAA,UAAU,CAAC7C,QAAX,CAAoBb,CAApB,GAAwB,CAAxB;AACAgD,MAAAA,UAAU,CAAC7B,GAAX,CAAesC,SAAf;AACAT,MAAAA,UAAU,CAAC7B,GAAX,CAAeuC,UAAf;AAEA,WAAKrD,KAAL,CAAWc,GAAX,CAAe6B,UAAf;AAEAS,MAAAA,SAAS,CAACE,QAAV,CAAmB7D,CAAnB,GAAuB1B,IAAI,CAACwF,EAAL,GAAU,IAAjC;AACAF,MAAAA,UAAU,CAACC,QAAX,CAAoB7D,CAApB,GAAwB1B,IAAI,CAACwF,EAAL,GAAU,IAAlC;AACAZ,MAAAA,UAAU,CAACnC,QAAX,CAAoBO,CAApB,GAAwB,GAAxB;AAEA,WAAKyC,SAAL,GAAiB,IAAIvG,KAAK,CAACwG,QAAV,EAAjB;AACA,UAAIC,aAAa,GAAG,IAAIzG,KAAK,CAAC0E,aAAV,EAApB;AACA,UAAIgC,MAAM,GAAGD,aAAa,CAAC9B,IAAd,CAAmB,mBAAnB,CAAb;;AACA,WAAK,IAAIgC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,IAApB,EAA0BA,CAAC,EAA3B,EAAgC;AAC5B,YAAIC,MAAM,GAAG,IAAI5G,KAAK,CAAC6G,OAAV,EAAb;AACAD,QAAAA,MAAM,CAACpE,CAAP,GAAW,OAAO1B,IAAI,CAACC,MAAL,EAAP,GAAuB,IAAlC;AACA6F,QAAAA,MAAM,CAAC9C,CAAP,GAAW,MAAMhD,IAAI,CAACC,MAAL,EAAN,GAAsB,GAAjC;AACA6F,QAAAA,MAAM,CAAClE,CAAP,GAAW,OAAO5B,IAAI,CAACC,MAAL,EAAP,GAAuB,IAAlC;AACA,aAAKwF,SAAL,CAAeO,QAAf,CAAwBC,IAAxB,CAA6BH,MAA7B;AACH;;AAED,UAAII,IAAI,GAAGP,aAAa,CAAC9B,IAAd,CAAmB,mBAAnB,CAAX;AACA,UAAIN,QAAQ,GAAG,IAAIrE,KAAK,CAACiH,mBAAV,CAA8B,GAA9B,EAAmC,EAAnC,EAAuC,CAAvC,CAAf;AACA,UAAIC,QAAQ,GAAG,IAAIlH,KAAK,CAACmH,mBAAV,CAA8B;AACzCC,QAAAA,WAAW,EAAE,IAD4B;AACtBC,QAAAA,OAAO,EAAE,GADa;AACRvB,QAAAA,QAAQ,EAAE9F,KAAK,CAAC+F,gBADR;AAC0BtB,QAAAA,GAAG,EAAEuC,IAD/B;AACqCpC,QAAAA,IAAI,EAAE5E,KAAK,CAAC6E;AADjD,OAA9B,CAAf;AAIA,UAAIyC,KAAK,GAAG,IAAItH,KAAK,CAACiF,IAAV,CAAeZ,QAAf,EAAyB6C,QAAzB,CAAZ;AACAI,MAAAA,KAAK,CAAC/D,QAAN,CAAeU,GAAf,CAAmB,CAAnB,EAAsB,EAAtB,EAA0B,IAA1B;AACA,WAAKlB,KAAL,CAAWc,GAAX,CAAeyD,KAAf;AAEH;;;+BAEU;AACP,WAAKtE,SAAL;AACA,WAAKwC,UAAL,CAAgBjC,QAAhB,CAAyBb,CAAzB,GAA6B,CAAC/B,QAA9B;AACA,UAAIgG,CAAJ,EAAOY,IAAP;AACA,UAAIC,MAAM,GAAG,KAAKxE,SAAL,GAAiBrC,QAAjB,GAA4BD,WAA5B,GAA0CH,SAAvD;;AACA,WAAKoG,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGpG,SAAhB,EAA2BoG,CAAC,EAA5B,EAAgC;AAC5B,aAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlH,SAAS,GAAG,CAAhC,EAAmCkH,CAAC,EAApC,EAAwC;AACpCF,UAAAA,IAAI,GAAGZ,CAAC,GAAGa,MAAX;;AACA,cAAKb,CAAC,GAAG,EAAL,IAAac,CAAC,GAAG,EAAjB,IAAyBA,CAAC,GAAG,EAAjC,EAAsC;AAClC,iBAAKxB,aAAL,CAAmBa,QAAnB,CAA4BH,CAAC,IAAIpG,SAAS,GAAG,CAAhB,CAAD,GAAsBkH,CAAlD,EAAqD/E,CAArD,GAAyD,KAAKW,MAAL,CAAYqE,KAAZ,CAAkBH,IAAI,GAAGhH,SAAP,GAAmBK,UAArC,EAAiD6G,CAAC,GAAGlH,SAAJ,GAAgBK,UAAjE,EAA6EC,SAA7E,IAA0FL,QAAnJ;AACH,WAFD,MAEO,IAAKmG,CAAC,GAAG,EAAJ,IAAUA,CAAC,GAAG,EAAnB,EAAwB;AAC3B,iBAAKV,aAAL,CAAmBa,QAAnB,CAA4BH,CAAC,IAAIpG,SAAS,GAAG,CAAhB,CAAD,GAAsBkH,CAAlD,EAAqD/E,CAArD,GAAyD,KAAKW,MAAL,CAAYqE,KAAZ,CAAkBH,IAAI,GAAGhH,SAAP,GAAmBK,UAArC,EAAiD6G,CAAC,GAAGlH,SAAJ,GAAgBK,UAAjE,EAA6EC,SAA7E,KAA2FL,QAAQ,GAAG,GAAtG,CAAzD;AACH,WAFM,MAEA;AACH,iBAAKyF,aAAL,CAAmBa,QAAnB,CAA4BH,CAAC,IAAIpG,SAAS,GAAG,CAAhB,CAAD,GAAsBkH,CAAlD,EAAqD/E,CAArD,GAAyD,KAAKW,MAAL,CAAYqE,KAAZ,CAAkBH,IAAI,GAAGhH,SAAP,GAAmBK,UAArC,EAAiD6G,CAAC,GAAGlH,SAAJ,GAAgBK,UAAjE,EAA6EC,SAA7E,KAA2FL,QAAQ,GAAG,CAAtG,CAAzD;AACH;AACJ;AACJ;;AACD,WAAKyF,aAAL,CAAmB0B,kBAAnB,GAAwC,IAAxC;AACH;;;wCAEmB;AAEhB,WAAK3E,SAAL,GAAiB,CAAjB;AAEA,WAAK4E,UAAL;AACA,WAAKC,SAAL;AACA,WAAKC,SAAL;AACA,WAAKC,YAAL,GAPgB,CAQhB;;AACA,WAAKC,cAAL;AACA,WAAKC,YAAL;AACA,WAAKC,UAAL,GAXgB,CAchB;;AACA/F,MAAAA,MAAM,CAACgG,gBAAP,CAAwB,QAAxB,EAAkC,KAAKlH,YAAvC;AAEA,WAAKE,KAAL,CAAWiH,WAAX,CAAuB,KAAK7G,QAAL,CAAcgE,UAArC;AACA,WAAK3D,KAAL;AACH;;;2CAEsB;AACnBO,MAAAA,MAAM,CAACkG,mBAAP,CAA2B,QAA3B,EAAsC,KAAKpH,YAA3C;AACA,WAAKe,IAAL;AACA,WAAKb,KAAL,CAAWmH,WAAX,CAAuB,KAAK/G,QAAL,CAAcgE,UAArC;AACH;;;6BAwCQ;AAAA;;AACL,aACA;AACI,QAAA,KAAK,EAAE;AAAErE,UAAAA,KAAK,EAAE,MAAT;AAAiBG,UAAAA,MAAM,EAAE;AAAzB,SADX;AAEI,QAAA,GAAG,EAAE,aAAAF,KAAK,EAAI;AACd,UAAA,MAAI,CAACA,KAAL,GAAaA,KAAb;AACC,SAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA;AAQH;;;;EA7O2BpB,S;;AAgPhC,eAAeiB,iBAAf","sourcesContent":["import React, { Component } from 'react'\nimport * as THREE from 'three'\nimport OrbitControls from 'three-orbitcontrols'\nimport {MTLLoader, OBJLoader} from 'three-obj-mtl-loader'\nimport ImprovedNoise from 'improved-noise'\n\nconst path = \"img/\"\nconst format = \".jpg\"\nconst FLOOR_RES = 60\nconst FLOOR_HT = 250\n\nconst FLOOR_WIDTH = 3600;\nconst FLOOR_DEPTH = 4800;\nconst MOVE_SPD = 1.9;\nconst noiseScale = 9.5;\nconst noiseSeed = Math.random() * 100;\n                \nclass LogoLoaderExample extends Component {\n\n\n    initCamera()\n    {\n        let width = this.mount.clientWidth\n        let height = this.mount.clientHeight\n\n        this.stepCount = 0\n\n        this.mouseX = 0;\n        this.mouseY = 0;\n        let windowHalfX = width / 2;\n        let windowHalfY = height / 2;\n        this.snoise = new ImprovedNoise();\n\n\n        let camera = new THREE.PerspectiveCamera(70, width / height, 1, 4000)\n        camera.position.z = 2750;\n\n        this.camera = camera\n    }\n    initScene()\n    {\n        let scene = new THREE.Scene()\n        scene.fog = new THREE.FogExp2(0x1c3c4a, 0.00045);\n\n        this.scene = scene\n    }\n    loadModels()\n    {\n        //Load model\n        /*new MTLLoader().load('models/bench.mtl', (materials) => {\n            materials.preload()\n            let objLoader = new OBJLoader();\n            objLoader.setMaterials(materials)\n            objLoader.load('models/bench.obj', (object) => {\n            this.scene.add(object)\n            })\n        })*/\n    }\n    initLight()\n    {\n        var hemisphereLight = new THREE.HemisphereLight(0xe3feff, 0xe6ddc8, 0.7);\n        this.scene.add(hemisphereLight);\n        hemisphereLight.position.y = 300;\n\n        var centerLight = new THREE.SpotLight(0xb7f9ff, 1);\n        this.scene.add(centerLight);\n        centerLight.position.set(2500, 300, 2000);\n        centerLight.penumbra = 1;\n        centerLight.decay = 5;\n\n        this.pointLight = new THREE.PointLight(0xe07bff, 1.5);\n        this.pointLight.position.z = 200;\n        this.scene.add(this.pointLight);\n\n        this.pointLight2 = new THREE.PointLight(0xff4e00, 1.2);\n        this.pointLight2.position.z = 200;\n        this.scene.add(this.pointLight2);\n    }\n    initSkyBox(){\n        let geometry = new THREE.CubeGeometry(6000,6000,6000);\n        var cubeMaterials = [\n          new THREE.MeshBasicMaterial({ map: new THREE.TextureLoader().load( \"textures/skybox/px.jpg\" ), side: THREE.DoubleSide }),\n          new THREE.MeshBasicMaterial({ map: new THREE.TextureLoader().load( 'textures/skybox/nx.jpg' ), side: THREE.DoubleSide }),\n          new THREE.MeshBasicMaterial({ map: new THREE.TextureLoader().load( 'textures/skybox/px.jpg' ), side: THREE.DoubleSide }),\n          new THREE.MeshBasicMaterial({ map: new THREE.TextureLoader().load( 'textures/skybox/nx.jpg' ), side: THREE.DoubleSide }),\n          new THREE.MeshBasicMaterial({ map: new THREE.TextureLoader().load( 'textures/skybox/px.jpg' ), side: THREE.DoubleSide }),\n          new THREE.MeshBasicMaterial({ map: new THREE.TextureLoader().load( 'textures/skybox/nx.jpg' ), side: THREE.DoubleSide })\n        ];\n      \n        var cubeMaterial = new THREE.MeshFaceMaterial( cubeMaterials );\n        this.cube = new THREE.Mesh( geometry, cubeMaterial );\n        this.scene.add(this.cube);\n      }\n    \n    initRenderer()\n    {\n        let width = this.mount.clientWidth\n        let height = this.mount.clientHeight\n\n        let renderer = new THREE.WebGLRenderer({ alpha: true })\n        renderer.setSize(width, height)\n        renderer.setPixelRatio( window.devicePixelRatio );\n\n        this.renderer = renderer\n\n    }\n\n    initController()\n    {\n        //add orbit\n        let orbit = new OrbitControls( this.camera, this.renderer.domElement );\n        this.scene.add(orbit);\n    }\n    initGeometry()\n    {\n        this.moverGroup = new THREE.Object3D();\n        this.scene.add(this.moverGroup);\n        \n        var floorGroup = new THREE.Object3D();\n        var floorMaterial = new THREE.MeshPhongMaterial({\n            color: 0xcccccc, side: THREE.DoubleSide, blending: THREE.AdditiveBlending, wireframe: false\n        });\n        this.floorGeometry = new THREE.PlaneGeometry(FLOOR_WIDTH + 1200, FLOOR_DEPTH, FLOOR_RES, FLOOR_RES);\n\n        var floorMesh = new THREE.Mesh(this.floorGeometry, floorMaterial);\n        var floorMesh2 = new THREE.Mesh(this.floorGeometry, floorMaterial);\n        floorMesh2.position.y = 20;\n        floorMesh2.position.z = 5;\n        floorGroup.add(floorMesh);\n        floorGroup.add(floorMesh2);\n\n        this.scene.add(floorGroup);\n\n        floorMesh.rotation.x = Math.PI / 1.65;\n        floorMesh2.rotation.x = Math.PI / 1.65;\n        floorGroup.position.y = 180;\n\n        this.pGeometry = new THREE.Geometry();\n        let textureLoader = new THREE.TextureLoader();\n        var sprite = textureLoader.load(\"textures/aarp.png\");\n        for( var i = 0; i < 2000; i++ ) {\n            var vertex = new THREE.Vector3();\n            vertex.x = 4000 * Math.random() - 2000;\n            vertex.y = 700 * Math.random() - 200;\n            vertex.z = 5000 * Math.random() - 2000;\n            this.pGeometry.vertices.push(vertex);\n        }\n\n        var logo = textureLoader.load(\"textures/aarp.png\");\n        var geometry = new THREE.PlaneBufferGeometry(266, 59, 1);\n        var material = new THREE.MeshLambertMaterial({\n            transparent: true, opacity: 0.7, blending: THREE.AdditiveBlending, map: logo, side: THREE.DoubleSide\n        });\n\n        var plane = new THREE.Mesh(geometry, material);\n        plane.position.set(0, 70, 2400);\n        this.scene.add(plane);\n\n    }\n\n    setWaves() {\n        this.stepCount++;\n        this.moverGroup.position.z = -MOVE_SPD;\n        var i, ipos;\n        var offset = this.stepCount * MOVE_SPD / FLOOR_DEPTH * FLOOR_RES;\n        for( i = 0; i < FLOOR_RES; i++) {\n            for( var j = 0; j < FLOOR_RES + 1; j++) {\n                ipos = i + offset;\n                if( (i > 30) || (j < 12) || (j > 48)) {\n                    this.floorGeometry.vertices[i * (FLOOR_RES + 1) + j].z = this.snoise.noise(ipos / FLOOR_RES * noiseScale, j / FLOOR_RES * noiseScale, noiseSeed) * FLOOR_HT;\n                } else if ( i > 25 && i < 30 ) {\n                    this.floorGeometry.vertices[i * (FLOOR_RES + 1) + j].z = this.snoise.noise(ipos / FLOOR_RES * noiseScale, j / FLOOR_RES * noiseScale, noiseSeed) * (FLOOR_HT / 1.2);\n                } else {\n                    this.floorGeometry.vertices[i * (FLOOR_RES + 1) + j].z = this.snoise.noise(ipos / FLOOR_RES * noiseScale, j / FLOOR_RES * noiseScale, noiseSeed) * (FLOOR_HT / 2);\n                }\n            }\n        }\n        this.floorGeometry.verticesNeedUpdate = true;\n    }\n    \n    componentDidMount() {\n\n        this.stepCount = 0;\n\n        this.initCamera()\n        this.initScene()\n        this.initLight()\n        this.initRenderer()\n        //this.initSkyBox()\n        this.initController()\n        this.initGeometry()\n        this.loadModels()\n        \n\n        //response for changing window size\n        window.addEventListener('resize', this.handleResize)\n\n        this.mount.appendChild(this.renderer.domElement)\n        this.start()\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize',  this.handleResize)\n        this.stop()\n        this.mount.removeChild(this.renderer.domElement)\n    }\n\n    handleResize = () => {\n        \n        let width = this.mount.clientWidth\n        let height = this.mount.clientHeight\n        \n        this.renderer.setSize(width, height)\n        this.camera.aspect = width / height\n        this.camera.updateProjectionMatrix()\n    }\n\n    start = () => {\n        if (!this.frameId) {\n        this.frameId = requestAnimationFrame(this.animate)\n        }\n    }\n\n    stop = () => {\n        cancelAnimationFrame(this.frameId)\n    }\n\n    animate = () => {\n        this.renderScene()\n        this.frameId = window.requestAnimationFrame(this.animate)\n    }\n\n    renderScene = () => {\n        var timer = -0.0002 * Date.now();\n        this.pointLight.x = 2400 * Math.cos(timer);\n        this.pointLight.z = 2400 * Math.sin(timer);\n        this.pointLight2.x = 1800 * Math.cos(-timer * 1.5);\n        this.pointLight2.z = 1800 * Math.sin(-timer * 1.5);\n        //this.camera.position.x += (this.mouseX - this.camera.position.x) * 0.05;\n        //this.camera.position.y += (this.mouseY - this.camera.position.y) * 0.05;\n        this.setWaves()\n        //this.camera.lookAt(this.scene.position);\n        this.renderer.render(this.scene, this.camera)\n    }\n\n    render() {\n        return (\n        <div\n            style={{ width: '100%', height: 'calc(100vh - 100px)' }}\n            ref={mount => {\n            this.mount = mount\n            }}\n        />\n        )\n    }\n}\n\nexport default LogoLoaderExample\n"]},"metadata":{},"sourceType":"module"}